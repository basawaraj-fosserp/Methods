{
  "version": 3,
  "sources": ["../../../../../apps/methods/methods/public/js/utils/barcode_scanner.js"],
  "sourcesContent": ["erpnext.utils.BarcodeScanner = class BarcodeScanner {\n\tconstructor(opts) {\n        console.log(\"Enter\")\n\t\tthis.frm = opts.frm;\n\t\t// frappe.flags.trigger_from_barcode_scanner is used for custom scripts\n\n\t\t// field from which to capture input of scanned data\n\t\tthis.scan_field_name = opts.scan_field_name || \"scan_barcode\";\n\t\tthis.scan_barcode_field = this.frm.fields_dict[this.scan_field_name];\n\n\t\tthis.barcode_field = opts.barcode_field || \"barcode\";\n\t\tthis.serial_no_field = opts.serial_no_field || \"serial_no\";\n\t\tthis.batch_no_field = opts.batch_no_field || \"batch_no\";\n\t\tthis.against_sales_order = \"against_sales_order\";\n\t\tthis.so_detail = \"so_detail\";\n\t\tthis.uom_field = opts.uom_field || \"uom\";\n\t\tthis.qty_field = opts.qty_field || \"qty\";\n\t\t// field name on row which defines max quantity to be scanned e.g. picklist\n\t\tthis.max_qty_field = opts.max_qty_field;\n\t\t// scanner won't add a new row if this flag is set.\n\t\tthis.dont_allow_new_row = opts.dont_allow_new_row;\n\t\t// scanner will ask user to type the quantity instead of incrementing by 1\n\t\tthis.prompt_qty = opts.prompt_qty;\n\n\t\tthis.items_table_name = opts.items_table_name || \"items\";\n\t\tthis.items_table = this.frm.doc[this.items_table_name];\n\n\t\t// optional sound name to play when scan either fails or passes.\n\t\t// see https://frappeframework.com/docs/v14/user/en/python-api/hooks#sounds\n\t\tthis.success_sound = opts.play_success_sound;\n\t\tthis.fail_sound = opts.play_fail_sound;\n\n\t\t// any API that takes `search_value` as input and returns dictionary as follows\n\t\t// {\n\t\t//     item_code: \"HORSESHOE\", // present if any item was found\n\t\t//     bar_code: \"123456\", // present if barcode was scanned\n\t\t//     batch_no: \"LOT12\", // present if batch was scanned\n\t\t//     serial_no: \"987XYZ\", // present if serial no was scanned\n\t\t//     uom: \"Kg\", // present if barcode UOM is different from default\n\t\t// }\n\t\tthis.scan_api = opts.scan_api || \"erpnext.stock.utils.scan_barcode\";\n\t}\n\n\tprocess_scan() {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tlet me = this;\n\n\t\t\tconst input = this.scan_barcode_field.value;\n\t\t\tthis.scan_barcode_field.set_value(\"\");\n\t\t\tif (!input) {\n\t\t\t\treturn;\n\t\t\t}\n            if (!this.frm.doc.sales_order_ref){\n                return;\n            }\n\t\t\tthis.scan_api_call(input, (r) => {\n\t\t\t\tconst data = r && r.message;\n\t\t\t\tif (!data || Object.keys(data).length === 0) {\n\t\t\t\t\tthis.show_alert(__(\"Cannot find Item with this Barcode\"), \"red\");\n\t\t\t\t\tthis.clean_up();\n\t\t\t\t\tthis.play_fail_sound();\n\t\t\t\t\treject();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tme.update_table(data)\n\t\t\t\t\t.then((row) => {\n\t\t\t\t\t\tthis.play_success_sound();\n\t\t\t\t\t\tresolve(row);\n\t\t\t\t\t})\n\t\t\t\t\t.catch(() => {\n\t\t\t\t\t\tthis.play_fail_sound();\n\t\t\t\t\t\treject();\n\t\t\t\t\t});\n\t\t\t});\n\t\t});\n\t}\n\n\tscan_api_call(input, callback) {\n\t\tfrappe\n\t\t\t.call({\n\t\t\t\tmethod: this.scan_api,\n\t\t\t\targs: {\n\t\t\t\t\tsearch_value: input,\n\t\t\t\t},\n\t\t\t})\n\t\t\t.then((r) => {\n\t\t\t\tfrappe.call({\n\t\t\t\t\tmethod:\"methods.methods.get_so_ref\",\n\t\t\t\t\targs:{\n\t\t\t\t\t\tsales_order : this.frm.doc.sales_order_ref,\n\t\t\t\t\t\tdata : r.message\n\t\t\t\t\t}\n\t\t\t\t}).then((d) => {\n\t\t\t\t\tconsole.log(d)\n\t\t\t\t\tcallback(d)\n\t\t\t\t})\n\t\t\t});\n\t}\n\n\tupdate_table(data) {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tlet cur_grid = this.frm.fields_dict[this.items_table_name].grid;\n\t\t\tfrappe.flags.trigger_from_barcode_scanner = true;\n\n\t\t\tconst { item_code, barcode, batch_no, serial_no, uom , against_sales_order, so_detail} = data;\n\n\t\t\tlet row = this.get_row_to_modify_on_scan(item_code, batch_no, uom, barcode);\n\n\t\t\tthis.is_new_row = false;\n\t\t\tif (!row) {\n\t\t\t\tif (this.dont_allow_new_row) {\n\t\t\t\t\tthis.show_alert(__(\"Maximum quantity scanned for item {0}.\", [item_code]), \"red\");\n\t\t\t\t\tthis.clean_up();\n\t\t\t\t\treject();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tthis.is_new_row = true;\n\n\t\t\t\t// add new row if new item/batch is scanned\n\t\t\t\trow = frappe.model.add_child(this.frm.doc, cur_grid.doctype, this.items_table_name);\n\t\t\t\t// trigger any row add triggers defined on child table.\n\t\t\t\tthis.frm.script_manager.trigger(`${this.items_table_name}_add`, row.doctype, row.name);\n\t\t\t\tthis.frm.has_items = false;\n\t\t\t}\n\n\t\t\tif (this.is_duplicate_serial_no(row, serial_no)) {\n\t\t\t\tthis.clean_up();\n\t\t\t\treject();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tfrappe.run_serially([\n\t\t\t\t() => this.set_selector_trigger_flag(data),\n\t\t\t\t() =>\n\t\t\t\t\tthis.set_item(row, item_code, barcode, batch_no, serial_no, against_sales_order, so_detail).then((qty) => {\n\t\t\t\t\t\tthis.show_scan_message(row.idx, row.item_code, qty);\n\t\t\t\t\t}),\n\t\t\t\t() => this.set_barcode_uom(row, uom),\n\t\t\t\t() => this.set_serial_no(row, serial_no),\n\t\t\t\t() => this.set_batch_no(row, batch_no),\n\t\t\t\t() => this.set_barcode(row, barcode),\n\t\t\t\t() => this.so_ref(row, against_sales_order),\n\t\t\t\t() => this.soi_ref(row, so_detail),\n\t\t\t\t() => this.clean_up(),\n\t\t\t\t() => this.revert_selector_flag(),\n\t\t\t\t() => resolve(row),\n\t\t\t]);\n\t\t});\n\t}\n\n\t// batch and serial selector is reduandant when all info can be added by scan\n\t// this flag on item row is used by transaction.js to avoid triggering selector\n\tset_selector_trigger_flag(data) {\n\t\tconst { batch_no, serial_no, has_batch_no, has_serial_no } = data;\n\n\t\tconst require_selecting_batch = has_batch_no && !batch_no;\n\t\tconst require_selecting_serial = has_serial_no && !serial_no;\n\n\t\tif (!(require_selecting_batch || require_selecting_serial)) {\n\t\t\tfrappe.flags.hide_serial_batch_dialog = true;\n\t\t}\n\t}\n\n\trevert_selector_flag() {\n\t\tfrappe.flags.hide_serial_batch_dialog = false;\n\t\tfrappe.flags.trigger_from_barcode_scanner = false;\n\t}\n\n\tset_item(row, item_code, barcode, batch_no, serial_no) {\n\t\treturn new Promise((resolve) => {\n\t\t\tconst increment = async (value = 1) => {\n\t\t\t\tconst item_data = { item_code: item_code, use_serial_batch_fields: 1.0 };\n\t\t\t\tfrappe.flags.trigger_from_barcode_scanner = true;\n\t\t\t\titem_data[this.qty_field] = Number(row[this.qty_field] || 0) + Number(value);\n\t\t\t\tawait frappe.model.set_value(row.doctype, row.name, item_data);\n\t\t\t\treturn value;\n\t\t\t};\n\n\t\t\tif (this.prompt_qty) {\n\t\t\t\tfrappe.prompt(__(\"Please enter quantity for item {0}\", [item_code]), ({ value }) => {\n\t\t\t\t\tincrement(value).then((value) => resolve(value));\n\t\t\t\t});\n\t\t\t} else if (this.frm.has_items) {\n\t\t\t\tthis.prepare_item_for_scan(row, item_code, barcode, batch_no, serial_no);\n\t\t\t} else {\n\t\t\t\tincrement().then((value) => resolve(value));\n\t\t\t}\n\t\t});\n\t}\n\n\tprepare_item_for_scan(row, item_code, barcode, batch_no, serial_no) {\n\t\tvar me = this;\n\t\tthis.dialog = new frappe.ui.Dialog({\n\t\t\ttitle: __(\"Scan barcode for item {0}\", [item_code]),\n\t\t\tfields: me.get_fields_for_dialog(row, item_code, barcode, batch_no, serial_no),\n\t\t});\n\n\t\tthis.dialog.set_primary_action(__(\"Update\"), () => {\n\t\t\tconst item_data = { item_code: item_code };\n\t\t\titem_data[this.qty_field] = this.dialog.get_value(\"scanned_qty\");\n\t\t\titem_data[\"has_item_scanned\"] = 1;\n\n\t\t\tthis.remaining_qty =\n\t\t\t\tflt(this.dialog.get_value(\"qty\")) - flt(this.dialog.get_value(\"scanned_qty\"));\n\t\t\tfrappe.model.set_value(row.doctype, row.name, item_data);\n\n\t\t\tfrappe.run_serially([\n\t\t\t\t() => this.set_batch_no(row, this.dialog.get_value(\"batch_no\")),\n\t\t\t\t() => this.set_barcode(row, this.dialog.get_value(\"barcode\")),\n\t\t\t\t() => this.set_serial_no(row, this.dialog.get_value(\"serial_no\")),\n\t\t\t\t() => this.add_child_for_remaining_qty(row),\n\t\t\t\t() => this.clean_up(),\n\t\t\t]);\n\n\t\t\tthis.dialog.hide();\n\t\t});\n\n\t\tthis.dialog.show();\n\n\t\tthis.$scan_btn = this.dialog.$wrapper.find(\".link-btn\");\n\t\tthis.$scan_btn.css(\"display\", \"inline\");\n\t}\n\n\tget_fields_for_dialog(row, item_code, barcode, batch_no, serial_no) {\n\t\tlet fields = [\n\t\t\t{\n\t\t\t\tfieldtype: \"Data\",\n\t\t\t\tfieldname: \"barcode_scanner\",\n\t\t\t\toptions: \"Barcode\",\n\t\t\t\tlabel: __(\"Scan Barcode\"),\n\t\t\t\tonchange: (e) => {\n\t\t\t\t\tif (!e) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (e.target.value) {\n\t\t\t\t\t\tthis.scan_api_call(e.target.value, (r) => {\n\t\t\t\t\t\t\tif (r.message) {\n\t\t\t\t\t\t\t\tthis.update_dialog_values(item_code, r);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldtype: \"Section Break\",\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldtype: \"Float\",\n\t\t\t\tfieldname: \"qty\",\n\t\t\t\tlabel: __(\"Quantity to Scan\"),\n\t\t\t\tdefault: row[this.qty_field] || 1,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldtype: \"Column Break\",\n\t\t\t\tfieldname: \"column_break_1\",\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldtype: \"Float\",\n\t\t\t\tread_only: 1,\n\t\t\t\tfieldname: \"scanned_qty\",\n\t\t\t\tlabel: __(\"Scanned Quantity\"),\n\t\t\t\tdefault: 1,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldtype: \"Section Break\",\n\t\t\t},\n\t\t];\n\n\t\tif (batch_no) {\n\t\t\tfields.push({\n\t\t\t\tfieldtype: \"Link\",\n\t\t\t\tfieldname: \"batch_no\",\n\t\t\t\toptions: \"Batch No\",\n\t\t\t\tlabel: __(\"Batch No\"),\n\t\t\t\tdefault: batch_no,\n\t\t\t\tread_only: 1,\n\t\t\t\thidden: 1,\n\t\t\t});\n\t\t}\n\n\t\tif (serial_no) {\n\t\t\tfields.push({\n\t\t\t\tfieldtype: \"Small Text\",\n\t\t\t\tfieldname: \"serial_no\",\n\t\t\t\tlabel: __(\"Serial Nos\"),\n\t\t\t\tdefault: serial_no,\n\t\t\t\tread_only: 1,\n\t\t\t});\n\t\t}\n\n\t\tif (barcode) {\n\t\t\tfields.push({\n\t\t\t\tfieldtype: \"Data\",\n\t\t\t\tfieldname: \"barcode\",\n\t\t\t\toptions: \"Barcode\",\n\t\t\t\tlabel: __(\"Barcode\"),\n\t\t\t\tdefault: barcode,\n\t\t\t\tread_only: 1,\n\t\t\t\thidden: 1,\n\t\t\t});\n\t\t}\n\n\t\treturn fields;\n\t}\n\n\tupdate_dialog_values(scanned_item, r) {\n\t\tconst { item_code, barcode, batch_no, serial_no } = r.message;\n\n\t\tthis.dialog.set_value(\"barcode_scanner\", \"\");\n\t\tif (\n\t\t\titem_code === scanned_item &&\n\t\t\t(this.dialog.get_value(\"barcode\") === barcode || batch_no || serial_no)\n\t\t) {\n\t\t\tif (batch_no) {\n\t\t\t\tthis.dialog.set_value(\"batch_no\", batch_no);\n\t\t\t}\n\n\t\t\tif (serial_no) {\n\t\t\t\tthis.validate_duplicate_serial_no(serial_no);\n\t\t\t\tlet serial_nos = this.dialog.get_value(\"serial_no\") + \"\\n\" + serial_no;\n\t\t\t\tthis.dialog.set_value(\"serial_no\", serial_nos);\n\t\t\t}\n\n\t\t\tlet qty = flt(this.dialog.get_value(\"scanned_qty\")) + 1.0;\n\t\t\tthis.dialog.set_value(\"scanned_qty\", qty);\n\t\t}\n\t}\n\n\tvalidate_duplicate_serial_no(serial_no) {\n\t\tlet serial_nos = this.dialog.get_value(\"serial_no\")\n\t\t\t? this.dialog.get_value(\"serial_no\").split(\"\\n\")\n\t\t\t: [];\n\n\t\tif (in_list(serial_nos, serial_no)) {\n\t\t\tfrappe.throw(__(\"Serial No {0} already scanned\", [serial_no]));\n\t\t}\n\t}\n\n\tadd_child_for_remaining_qty(prev_row) {\n\t\tif (this.remaining_qty && this.remaining_qty > 0) {\n\t\t\tlet cur_grid = this.frm.fields_dict[this.items_table_name].grid;\n\t\t\tlet row = frappe.model.add_child(this.frm.doc, cur_grid.doctype, this.items_table_name);\n\n\t\t\tlet ignore_fields = [\n\t\t\t\t\"name\",\n\t\t\t\t\"idx\",\n\t\t\t\t\"batch_no\",\n\t\t\t\t\"barcode\",\n\t\t\t\t\"received_qty\",\n\t\t\t\t\"serial_no\",\n\t\t\t\t\"has_item_scanned\",\n\t\t\t];\n\n\t\t\tfor (let key in prev_row) {\n\t\t\t\tif (in_list(ignore_fields, key)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\trow[key] = prev_row[key];\n\t\t\t}\n\n\t\t\trow[this.qty_field] = this.remaining_qty;\n\t\t\tif (this.qty_field == \"qty\" && frappe.meta.has_field(row.doctype, \"stock_qty\")) {\n\t\t\t\trow[\"stock_qty\"] = this.remaining_qty * row.conversion_factor;\n\t\t\t}\n\n\t\t\tthis.frm.script_manager.trigger(\"item_code\", row.doctype, row.name);\n\t\t}\n\t}\n\n\tasync set_serial_no(row, serial_no) {\n\t\tif (serial_no && frappe.meta.has_field(row.doctype, this.serial_no_field)) {\n\t\t\tconst existing_serial_nos = row[this.serial_no_field];\n\t\t\tlet new_serial_nos = \"\";\n\n\t\t\tif (!!existing_serial_nos) {\n\t\t\t\tnew_serial_nos = existing_serial_nos + \"\\n\" + serial_no;\n\t\t\t} else {\n\t\t\t\tnew_serial_nos = serial_no;\n\t\t\t}\n\t\t\tawait frappe.model.set_value(row.doctype, row.name, this.serial_no_field, new_serial_nos);\n\t\t}\n\t}\n\n\tasync set_barcode_uom(row, uom) {\n\t\tif (uom && frappe.meta.has_field(row.doctype, this.uom_field)) {\n\t\t\tawait frappe.model.set_value(row.doctype, row.name, this.uom_field, uom);\n\t\t}\n\t}\n\n\tasync set_batch_no(row, batch_no) {\n\t\tif (batch_no && frappe.meta.has_field(row.doctype, this.batch_no_field)) {\n\t\t\tawait frappe.model.set_value(row.doctype, row.name, this.batch_no_field, batch_no);\n\t\t}\n\t}\n\t\n\tasync so_ref(row, against_sales_order) {\n\t\tif (against_sales_order && frappe.meta.has_field(row.doctype, this.against_sales_order)) {\n\t\t\tawait frappe.model.set_value(row.doctype, row.name, this.against_sales_order, against_sales_order);\n\t\t}\n\t}\n\t\n\tasync soi_ref(row, so_detail) {\n\t\tif (so_detail && frappe.meta.has_field(row.doctype, this.so_detail)) {\n\t\t\tawait frappe.model.set_value(row.doctype, row.name, this.so_detail, so_detail);\n\t\t}\n\t}\n\n\tasync set_barcode(row, barcode) {\n\t\tif (barcode && frappe.meta.has_field(row.doctype, this.barcode_field)) {\n\t\t\tawait frappe.model.set_value(row.doctype, row.name, this.barcode_field, barcode);\n\t\t}\n\t}\n\n\tshow_scan_message(idx, exist = null, qty = 1) {\n\t\t// show new row or qty increase toast\n\t\tif (exist) {\n\t\t\tthis.show_alert(__(\"Row #{0}: Qty increased by {1}\", [idx, qty]), \"green\");\n\t\t} else {\n\t\t\tthis.show_alert(__(\"Row #{0}: Item added\", [idx]), \"green\");\n\t\t}\n\t}\n\n\tis_duplicate_serial_no(row, serial_no) {\n\t\tconst is_duplicate = row[this.serial_no_field]?.includes(serial_no);\n\n\t\tif (is_duplicate) {\n\t\t\tthis.show_alert(__(\"Serial No {0} is already added\", [serial_no]), \"orange\");\n\t\t}\n\t\treturn is_duplicate;\n\t}\n\n\tget_row_to_modify_on_scan(item_code, batch_no, uom, barcode) {\n\t\tlet cur_grid = this.frm.fields_dict[this.items_table_name].grid;\n\n\t\t// Check if batch is scanned and table has batch no field\n\t\tlet is_batch_no_scan = batch_no && frappe.meta.has_field(cur_grid.doctype, this.batch_no_field);\n\t\tlet check_max_qty = this.max_qty_field && frappe.meta.has_field(cur_grid.doctype, this.max_qty_field);\n\n\t\tconst matching_row = (row) => {\n\t\t\tconst item_match = row.item_code == item_code;\n\t\t\tconst batch_match = !row[this.batch_no_field] || row[this.batch_no_field] == batch_no;\n\t\t\tconst uom_match = !uom || row[this.uom_field] == uom;\n\t\t\tconst qty_in_limit = flt(row[this.qty_field]) < flt(row[this.max_qty_field]);\n\t\t\tconst item_scanned = row.has_item_scanned;\n\n\t\t\treturn (\n\t\t\t\titem_match &&\n\t\t\t\tuom_match &&\n\t\t\t\t!item_scanned &&\n\t\t\t\t(!is_batch_no_scan || batch_match) &&\n\t\t\t\t(!check_max_qty || qty_in_limit)\n\t\t\t);\n\t\t};\n\n\t\treturn this.items_table.find(matching_row) || this.get_existing_blank_row();\n\t}\n\n\tget_existing_blank_row() {\n\t\treturn this.items_table.find((d) => !d.item_code);\n\t}\n\n\tplay_success_sound() {\n\t\tthis.success_sound && frappe.utils.play_sound(this.success_sound);\n\t}\n\n\tplay_fail_sound() {\n\t\tthis.fail_sound && frappe.utils.play_sound(this.fail_sound);\n\t}\n\n\tclean_up() {\n\t\tthis.scan_barcode_field.set_value(\"\");\n\t\trefresh_field(this.items_table_name);\n\t}\n\tshow_alert(msg, indicator, duration = 3) {\n\t\tfrappe.show_alert({ message: msg, indicator: indicator }, duration);\n\t}\n};\n"],
  "mappings": ";;AAAA,UAAQ,MAAM,iBAAiB,MAAM,eAAe;AAAA,IACnD,YAAY,MAAM;AACX,cAAQ,IAAI,OAAO;AACzB,WAAK,MAAM,KAAK;AAIhB,WAAK,kBAAkB,KAAK,mBAAmB;AAC/C,WAAK,qBAAqB,KAAK,IAAI,YAAY,KAAK;AAEpD,WAAK,gBAAgB,KAAK,iBAAiB;AAC3C,WAAK,kBAAkB,KAAK,mBAAmB;AAC/C,WAAK,iBAAiB,KAAK,kBAAkB;AAC7C,WAAK,sBAAsB;AAC3B,WAAK,YAAY;AACjB,WAAK,YAAY,KAAK,aAAa;AACnC,WAAK,YAAY,KAAK,aAAa;AAEnC,WAAK,gBAAgB,KAAK;AAE1B,WAAK,qBAAqB,KAAK;AAE/B,WAAK,aAAa,KAAK;AAEvB,WAAK,mBAAmB,KAAK,oBAAoB;AACjD,WAAK,cAAc,KAAK,IAAI,IAAI,KAAK;AAIrC,WAAK,gBAAgB,KAAK;AAC1B,WAAK,aAAa,KAAK;AAUvB,WAAK,WAAW,KAAK,YAAY;AAAA,IAClC;AAAA,IAEA,eAAe;AACd,aAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AACvC,YAAI,KAAK;AAET,cAAM,QAAQ,KAAK,mBAAmB;AACtC,aAAK,mBAAmB,UAAU,EAAE;AACpC,YAAI,CAAC,OAAO;AACX;AAAA,QACD;AACS,YAAI,CAAC,KAAK,IAAI,IAAI,iBAAgB;AAC9B;AAAA,QACJ;AACT,aAAK,cAAc,OAAO,CAAC,MAAM;AAChC,gBAAM,OAAO,KAAK,EAAE;AACpB,cAAI,CAAC,QAAQ,OAAO,KAAK,IAAI,EAAE,WAAW,GAAG;AAC5C,iBAAK,WAAW,GAAG,oCAAoC,GAAG,KAAK;AAC/D,iBAAK,SAAS;AACd,iBAAK,gBAAgB;AACrB,mBAAO;AACP;AAAA,UACD;AAEA,aAAG,aAAa,IAAI,EAClB,KAAK,CAAC,QAAQ;AACd,iBAAK,mBAAmB;AACxB,oBAAQ,GAAG;AAAA,UACZ,CAAC,EACA,MAAM,MAAM;AACZ,iBAAK,gBAAgB;AACrB,mBAAO;AAAA,UACR,CAAC;AAAA,QACH,CAAC;AAAA,MACF,CAAC;AAAA,IACF;AAAA,IAEA,cAAc,OAAO,UAAU;AAC9B,aACE,KAAK;AAAA,QACL,QAAQ,KAAK;AAAA,QACb,MAAM;AAAA,UACL,cAAc;AAAA,QACf;AAAA,MACD,CAAC,EACA,KAAK,CAAC,MAAM;AACZ,eAAO,KAAK;AAAA,UACX,QAAO;AAAA,UACP,MAAK;AAAA,YACJ,aAAc,KAAK,IAAI,IAAI;AAAA,YAC3B,MAAO,EAAE;AAAA,UACV;AAAA,QACD,CAAC,EAAE,KAAK,CAAC,MAAM;AACd,kBAAQ,IAAI,CAAC;AACb,mBAAS,CAAC;AAAA,QACX,CAAC;AAAA,MACF,CAAC;AAAA,IACH;AAAA,IAEA,aAAa,MAAM;AAClB,aAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AACvC,YAAI,WAAW,KAAK,IAAI,YAAY,KAAK,kBAAkB;AAC3D,eAAO,MAAM,+BAA+B;AAE5C,cAAM,EAAE,WAAW,SAAS,UAAU,WAAW,KAAM,qBAAqB,UAAS,IAAI;AAEzF,YAAI,MAAM,KAAK,0BAA0B,WAAW,UAAU,KAAK,OAAO;AAE1E,aAAK,aAAa;AAClB,YAAI,CAAC,KAAK;AACT,cAAI,KAAK,oBAAoB;AAC5B,iBAAK,WAAW,GAAG,0CAA0C,CAAC,SAAS,CAAC,GAAG,KAAK;AAChF,iBAAK,SAAS;AACd,mBAAO;AACP;AAAA,UACD;AACA,eAAK,aAAa;AAGlB,gBAAM,OAAO,MAAM,UAAU,KAAK,IAAI,KAAK,SAAS,SAAS,KAAK,gBAAgB;AAElF,eAAK,IAAI,eAAe,QAAQ,GAAG,KAAK,wBAAwB,IAAI,SAAS,IAAI,IAAI;AACrF,eAAK,IAAI,YAAY;AAAA,QACtB;AAEA,YAAI,KAAK,uBAAuB,KAAK,SAAS,GAAG;AAChD,eAAK,SAAS;AACd,iBAAO;AACP;AAAA,QACD;AAEA,eAAO,aAAa;AAAA,UACnB,MAAM,KAAK,0BAA0B,IAAI;AAAA,UACzC,MACC,KAAK,SAAS,KAAK,WAAW,SAAS,UAAU,WAAW,qBAAqB,SAAS,EAAE,KAAK,CAAC,QAAQ;AACzG,iBAAK,kBAAkB,IAAI,KAAK,IAAI,WAAW,GAAG;AAAA,UACnD,CAAC;AAAA,UACF,MAAM,KAAK,gBAAgB,KAAK,GAAG;AAAA,UACnC,MAAM,KAAK,cAAc,KAAK,SAAS;AAAA,UACvC,MAAM,KAAK,aAAa,KAAK,QAAQ;AAAA,UACrC,MAAM,KAAK,YAAY,KAAK,OAAO;AAAA,UACnC,MAAM,KAAK,OAAO,KAAK,mBAAmB;AAAA,UAC1C,MAAM,KAAK,QAAQ,KAAK,SAAS;AAAA,UACjC,MAAM,KAAK,SAAS;AAAA,UACpB,MAAM,KAAK,qBAAqB;AAAA,UAChC,MAAM,QAAQ,GAAG;AAAA,QAClB,CAAC;AAAA,MACF,CAAC;AAAA,IACF;AAAA,IAIA,0BAA0B,MAAM;AAC/B,YAAM,EAAE,UAAU,WAAW,cAAc,cAAc,IAAI;AAE7D,YAAM,0BAA0B,gBAAgB,CAAC;AACjD,YAAM,2BAA2B,iBAAiB,CAAC;AAEnD,UAAI,EAAE,2BAA2B,2BAA2B;AAC3D,eAAO,MAAM,2BAA2B;AAAA,MACzC;AAAA,IACD;AAAA,IAEA,uBAAuB;AACtB,aAAO,MAAM,2BAA2B;AACxC,aAAO,MAAM,+BAA+B;AAAA,IAC7C;AAAA,IAEA,SAAS,KAAK,WAAW,SAAS,UAAU,WAAW;AACtD,aAAO,IAAI,QAAQ,CAAC,YAAY;AAC/B,cAAM,YAAY,OAAO,QAAQ,MAAM;AACtC,gBAAM,YAAY,EAAE,WAAsB,yBAAyB,EAAI;AACvE,iBAAO,MAAM,+BAA+B;AAC5C,oBAAU,KAAK,aAAa,OAAO,IAAI,KAAK,cAAc,CAAC,IAAI,OAAO,KAAK;AAC3E,gBAAM,OAAO,MAAM,UAAU,IAAI,SAAS,IAAI,MAAM,SAAS;AAC7D,iBAAO;AAAA,QACR;AAEA,YAAI,KAAK,YAAY;AACpB,iBAAO,OAAO,GAAG,sCAAsC,CAAC,SAAS,CAAC,GAAG,CAAC,EAAE,MAAM,MAAM;AACnF,sBAAU,KAAK,EAAE,KAAK,CAACA,WAAU,QAAQA,MAAK,CAAC;AAAA,UAChD,CAAC;AAAA,QACF,WAAW,KAAK,IAAI,WAAW;AAC9B,eAAK,sBAAsB,KAAK,WAAW,SAAS,UAAU,SAAS;AAAA,QACxE,OAAO;AACN,oBAAU,EAAE,KAAK,CAAC,UAAU,QAAQ,KAAK,CAAC;AAAA,QAC3C;AAAA,MACD,CAAC;AAAA,IACF;AAAA,IAEA,sBAAsB,KAAK,WAAW,SAAS,UAAU,WAAW;AACnE,UAAI,KAAK;AACT,WAAK,SAAS,IAAI,OAAO,GAAG,OAAO;AAAA,QAClC,OAAO,GAAG,6BAA6B,CAAC,SAAS,CAAC;AAAA,QAClD,QAAQ,GAAG,sBAAsB,KAAK,WAAW,SAAS,UAAU,SAAS;AAAA,MAC9E,CAAC;AAED,WAAK,OAAO,mBAAmB,GAAG,QAAQ,GAAG,MAAM;AAClD,cAAM,YAAY,EAAE,UAAqB;AACzC,kBAAU,KAAK,aAAa,KAAK,OAAO,UAAU,aAAa;AAC/D,kBAAU,sBAAsB;AAEhC,aAAK,gBACJ,IAAI,KAAK,OAAO,UAAU,KAAK,CAAC,IAAI,IAAI,KAAK,OAAO,UAAU,aAAa,CAAC;AAC7E,eAAO,MAAM,UAAU,IAAI,SAAS,IAAI,MAAM,SAAS;AAEvD,eAAO,aAAa;AAAA,UACnB,MAAM,KAAK,aAAa,KAAK,KAAK,OAAO,UAAU,UAAU,CAAC;AAAA,UAC9D,MAAM,KAAK,YAAY,KAAK,KAAK,OAAO,UAAU,SAAS,CAAC;AAAA,UAC5D,MAAM,KAAK,cAAc,KAAK,KAAK,OAAO,UAAU,WAAW,CAAC;AAAA,UAChE,MAAM,KAAK,4BAA4B,GAAG;AAAA,UAC1C,MAAM,KAAK,SAAS;AAAA,QACrB,CAAC;AAED,aAAK,OAAO,KAAK;AAAA,MAClB,CAAC;AAED,WAAK,OAAO,KAAK;AAEjB,WAAK,YAAY,KAAK,OAAO,SAAS,KAAK,WAAW;AACtD,WAAK,UAAU,IAAI,WAAW,QAAQ;AAAA,IACvC;AAAA,IAEA,sBAAsB,KAAK,WAAW,SAAS,UAAU,WAAW;AACnE,UAAI,SAAS;AAAA,QACZ;AAAA,UACC,WAAW;AAAA,UACX,WAAW;AAAA,UACX,SAAS;AAAA,UACT,OAAO,GAAG,cAAc;AAAA,UACxB,UAAU,CAAC,MAAM;AAChB,gBAAI,CAAC,GAAG;AACP;AAAA,YACD;AAEA,gBAAI,EAAE,OAAO,OAAO;AACnB,mBAAK,cAAc,EAAE,OAAO,OAAO,CAAC,MAAM;AACzC,oBAAI,EAAE,SAAS;AACd,uBAAK,qBAAqB,WAAW,CAAC;AAAA,gBACvC;AAAA,cACD,CAAC;AAAA,YACF;AAAA,UACD;AAAA,QACD;AAAA,QACA;AAAA,UACC,WAAW;AAAA,QACZ;AAAA,QACA;AAAA,UACC,WAAW;AAAA,UACX,WAAW;AAAA,UACX,OAAO,GAAG,kBAAkB;AAAA,UAC5B,SAAS,IAAI,KAAK,cAAc;AAAA,QACjC;AAAA,QACA;AAAA,UACC,WAAW;AAAA,UACX,WAAW;AAAA,QACZ;AAAA,QACA;AAAA,UACC,WAAW;AAAA,UACX,WAAW;AAAA,UACX,WAAW;AAAA,UACX,OAAO,GAAG,kBAAkB;AAAA,UAC5B,SAAS;AAAA,QACV;AAAA,QACA;AAAA,UACC,WAAW;AAAA,QACZ;AAAA,MACD;AAEA,UAAI,UAAU;AACb,eAAO,KAAK;AAAA,UACX,WAAW;AAAA,UACX,WAAW;AAAA,UACX,SAAS;AAAA,UACT,OAAO,GAAG,UAAU;AAAA,UACpB,SAAS;AAAA,UACT,WAAW;AAAA,UACX,QAAQ;AAAA,QACT,CAAC;AAAA,MACF;AAEA,UAAI,WAAW;AACd,eAAO,KAAK;AAAA,UACX,WAAW;AAAA,UACX,WAAW;AAAA,UACX,OAAO,GAAG,YAAY;AAAA,UACtB,SAAS;AAAA,UACT,WAAW;AAAA,QACZ,CAAC;AAAA,MACF;AAEA,UAAI,SAAS;AACZ,eAAO,KAAK;AAAA,UACX,WAAW;AAAA,UACX,WAAW;AAAA,UACX,SAAS;AAAA,UACT,OAAO,GAAG,SAAS;AAAA,UACnB,SAAS;AAAA,UACT,WAAW;AAAA,UACX,QAAQ;AAAA,QACT,CAAC;AAAA,MACF;AAEA,aAAO;AAAA,IACR;AAAA,IAEA,qBAAqB,cAAc,GAAG;AACrC,YAAM,EAAE,WAAW,SAAS,UAAU,UAAU,IAAI,EAAE;AAEtD,WAAK,OAAO,UAAU,mBAAmB,EAAE;AAC3C,UACC,cAAc,iBACb,KAAK,OAAO,UAAU,SAAS,MAAM,WAAW,YAAY,YAC5D;AACD,YAAI,UAAU;AACb,eAAK,OAAO,UAAU,YAAY,QAAQ;AAAA,QAC3C;AAEA,YAAI,WAAW;AACd,eAAK,6BAA6B,SAAS;AAC3C,cAAI,aAAa,KAAK,OAAO,UAAU,WAAW,IAAI,OAAO;AAC7D,eAAK,OAAO,UAAU,aAAa,UAAU;AAAA,QAC9C;AAEA,YAAI,MAAM,IAAI,KAAK,OAAO,UAAU,aAAa,CAAC,IAAI;AACtD,aAAK,OAAO,UAAU,eAAe,GAAG;AAAA,MACzC;AAAA,IACD;AAAA,IAEA,6BAA6B,WAAW;AACvC,UAAI,aAAa,KAAK,OAAO,UAAU,WAAW,IAC/C,KAAK,OAAO,UAAU,WAAW,EAAE,MAAM,IAAI,IAC7C,CAAC;AAEJ,UAAI,QAAQ,YAAY,SAAS,GAAG;AACnC,eAAO,MAAM,GAAG,iCAAiC,CAAC,SAAS,CAAC,CAAC;AAAA,MAC9D;AAAA,IACD;AAAA,IAEA,4BAA4B,UAAU;AACrC,UAAI,KAAK,iBAAiB,KAAK,gBAAgB,GAAG;AACjD,YAAI,WAAW,KAAK,IAAI,YAAY,KAAK,kBAAkB;AAC3D,YAAI,MAAM,OAAO,MAAM,UAAU,KAAK,IAAI,KAAK,SAAS,SAAS,KAAK,gBAAgB;AAEtF,YAAI,gBAAgB;AAAA,UACnB;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,QACD;AAEA,iBAAS,OAAO,UAAU;AACzB,cAAI,QAAQ,eAAe,GAAG,GAAG;AAChC;AAAA,UACD;AAEA,cAAI,OAAO,SAAS;AAAA,QACrB;AAEA,YAAI,KAAK,aAAa,KAAK;AAC3B,YAAI,KAAK,aAAa,SAAS,OAAO,KAAK,UAAU,IAAI,SAAS,WAAW,GAAG;AAC/E,cAAI,eAAe,KAAK,gBAAgB,IAAI;AAAA,QAC7C;AAEA,aAAK,IAAI,eAAe,QAAQ,aAAa,IAAI,SAAS,IAAI,IAAI;AAAA,MACnE;AAAA,IACD;AAAA,IAEA,MAAM,cAAc,KAAK,WAAW;AACnC,UAAI,aAAa,OAAO,KAAK,UAAU,IAAI,SAAS,KAAK,eAAe,GAAG;AAC1E,cAAM,sBAAsB,IAAI,KAAK;AACrC,YAAI,iBAAiB;AAErB,YAAI,CAAC,CAAC,qBAAqB;AAC1B,2BAAiB,sBAAsB,OAAO;AAAA,QAC/C,OAAO;AACN,2BAAiB;AAAA,QAClB;AACA,cAAM,OAAO,MAAM,UAAU,IAAI,SAAS,IAAI,MAAM,KAAK,iBAAiB,cAAc;AAAA,MACzF;AAAA,IACD;AAAA,IAEA,MAAM,gBAAgB,KAAK,KAAK;AAC/B,UAAI,OAAO,OAAO,KAAK,UAAU,IAAI,SAAS,KAAK,SAAS,GAAG;AAC9D,cAAM,OAAO,MAAM,UAAU,IAAI,SAAS,IAAI,MAAM,KAAK,WAAW,GAAG;AAAA,MACxE;AAAA,IACD;AAAA,IAEA,MAAM,aAAa,KAAK,UAAU;AACjC,UAAI,YAAY,OAAO,KAAK,UAAU,IAAI,SAAS,KAAK,cAAc,GAAG;AACxE,cAAM,OAAO,MAAM,UAAU,IAAI,SAAS,IAAI,MAAM,KAAK,gBAAgB,QAAQ;AAAA,MAClF;AAAA,IACD;AAAA,IAEA,MAAM,OAAO,KAAK,qBAAqB;AACtC,UAAI,uBAAuB,OAAO,KAAK,UAAU,IAAI,SAAS,KAAK,mBAAmB,GAAG;AACxF,cAAM,OAAO,MAAM,UAAU,IAAI,SAAS,IAAI,MAAM,KAAK,qBAAqB,mBAAmB;AAAA,MAClG;AAAA,IACD;AAAA,IAEA,MAAM,QAAQ,KAAK,WAAW;AAC7B,UAAI,aAAa,OAAO,KAAK,UAAU,IAAI,SAAS,KAAK,SAAS,GAAG;AACpE,cAAM,OAAO,MAAM,UAAU,IAAI,SAAS,IAAI,MAAM,KAAK,WAAW,SAAS;AAAA,MAC9E;AAAA,IACD;AAAA,IAEA,MAAM,YAAY,KAAK,SAAS;AAC/B,UAAI,WAAW,OAAO,KAAK,UAAU,IAAI,SAAS,KAAK,aAAa,GAAG;AACtE,cAAM,OAAO,MAAM,UAAU,IAAI,SAAS,IAAI,MAAM,KAAK,eAAe,OAAO;AAAA,MAChF;AAAA,IACD;AAAA,IAEA,kBAAkB,KAAK,QAAQ,MAAM,MAAM,GAAG;AAE7C,UAAI,OAAO;AACV,aAAK,WAAW,GAAG,kCAAkC,CAAC,KAAK,GAAG,CAAC,GAAG,OAAO;AAAA,MAC1E,OAAO;AACN,aAAK,WAAW,GAAG,wBAAwB,CAAC,GAAG,CAAC,GAAG,OAAO;AAAA,MAC3D;AAAA,IACD;AAAA,IAEA,uBAAuB,KAAK,WAAW;AAzaxC;AA0aE,YAAM,gBAAe,SAAI,KAAK,qBAAT,mBAA2B,SAAS;AAEzD,UAAI,cAAc;AACjB,aAAK,WAAW,GAAG,kCAAkC,CAAC,SAAS,CAAC,GAAG,QAAQ;AAAA,MAC5E;AACA,aAAO;AAAA,IACR;AAAA,IAEA,0BAA0B,WAAW,UAAU,KAAK,SAAS;AAC5D,UAAI,WAAW,KAAK,IAAI,YAAY,KAAK,kBAAkB;AAG3D,UAAI,mBAAmB,YAAY,OAAO,KAAK,UAAU,SAAS,SAAS,KAAK,cAAc;AAC9F,UAAI,gBAAgB,KAAK,iBAAiB,OAAO,KAAK,UAAU,SAAS,SAAS,KAAK,aAAa;AAEpG,YAAM,eAAe,CAAC,QAAQ;AAC7B,cAAM,aAAa,IAAI,aAAa;AACpC,cAAM,cAAc,CAAC,IAAI,KAAK,mBAAmB,IAAI,KAAK,mBAAmB;AAC7E,cAAM,YAAY,CAAC,OAAO,IAAI,KAAK,cAAc;AACjD,cAAM,eAAe,IAAI,IAAI,KAAK,UAAU,IAAI,IAAI,IAAI,KAAK,cAAc;AAC3E,cAAM,eAAe,IAAI;AAEzB,eACC,cACA,aACA,CAAC,iBACA,CAAC,oBAAoB,iBACrB,CAAC,iBAAiB;AAAA,MAErB;AAEA,aAAO,KAAK,YAAY,KAAK,YAAY,KAAK,KAAK,uBAAuB;AAAA,IAC3E;AAAA,IAEA,yBAAyB;AACxB,aAAO,KAAK,YAAY,KAAK,CAAC,MAAM,CAAC,EAAE,SAAS;AAAA,IACjD;AAAA,IAEA,qBAAqB;AACpB,WAAK,iBAAiB,OAAO,MAAM,WAAW,KAAK,aAAa;AAAA,IACjE;AAAA,IAEA,kBAAkB;AACjB,WAAK,cAAc,OAAO,MAAM,WAAW,KAAK,UAAU;AAAA,IAC3D;AAAA,IAEA,WAAW;AACV,WAAK,mBAAmB,UAAU,EAAE;AACpC,oBAAc,KAAK,gBAAgB;AAAA,IACpC;AAAA,IACA,WAAW,KAAK,WAAW,WAAW,GAAG;AACxC,aAAO,WAAW,EAAE,SAAS,KAAK,UAAqB,GAAG,QAAQ;AAAA,IACnE;AAAA,EACD;",
  "names": ["value"]
}
