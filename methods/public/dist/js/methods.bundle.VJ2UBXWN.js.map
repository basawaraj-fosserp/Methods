{
  "version": 3,
  "sources": ["../../../../../apps/methods/methods/public/js/utils/barcode_scanner.js"],
  "sourcesContent": ["erpnext.utils.BarcodeScanner = class BarcodeScanner {\n\tconstructor(opts) {\n        console.log(\"Enter\")\n\t\tthis.frm = opts.frm;\n\t\t// frappe.flags.trigger_from_barcode_scanner is used for custom scripts\n\n\t\t// field from which to capture input of scanned data\n\t\tthis.scan_field_name = opts.scan_field_name || \"scan_barcode\";\n\t\tthis.scan_barcode_field = this.frm.fields_dict[this.scan_field_name];\n\n\t\tthis.barcode_field = opts.barcode_field || \"barcode\";\n\t\tthis.serial_no_field = opts.serial_no_field || \"serial_no\";\n\t\tthis.batch_no_field = opts.batch_no_field || \"batch_no\";\n\t\tthis.against_sales_order = \"against_sales_order\";\n\t\tthis.so_detail = \"so_detail\";\n\t\tthis.uom_field = opts.uom_field || \"uom\";\n\t\tthis.qty_field = opts.qty_field || \"qty\";\n\t\t// field name on row which defines max quantity to be scanned e.g. picklist\n\t\tthis.max_qty_field = opts.max_qty_field;\n\t\t// scanner won't add a new row if this flag is set.\n\t\tthis.dont_allow_new_row = opts.dont_allow_new_row;\n\t\t// scanner will ask user to type the quantity instead of incrementing by 1\n\t\tthis.prompt_qty = opts.prompt_qty;\n\n\t\tthis.items_table_name = opts.items_table_name || \"items\";\n\t\tthis.items_table = this.frm.doc[this.items_table_name];\n\n\t\t// optional sound name to play when scan either fails or passes.\n\t\t// see https://frappeframework.com/docs/v14/user/en/python-api/hooks#sounds\n\t\tthis.success_sound = opts.play_success_sound;\n\t\tthis.fail_sound = opts.play_fail_sound;\n\n\t\t// any API that takes `search_value` as input and returns dictionary as follows\n\t\t// {\n\t\t//     item_code: \"HORSESHOE\", // present if any item was found\n\t\t//     bar_code: \"123456\", // present if barcode was scanned\n\t\t//     batch_no: \"LOT12\", // present if batch was scanned\n\t\t//     serial_no: \"987XYZ\", // present if serial no was scanned\n\t\t//     uom: \"Kg\", // present if barcode UOM is different from default\n\t\t// }\n\t\tthis.scan_api = opts.scan_api || \"erpnext.stock.utils.scan_barcode\";\n\t}\n\n\tprocess_scan() {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tlet me = this;\n\n\t\t\tconst input = this.scan_barcode_field.value;\n\t\t\tthis.scan_barcode_field.set_value(\"\");\n\t\t\tif (!input) {\n\t\t\t\treturn;\n\t\t\t}\n            if (!this.frm.doc.sales_order_ref){\n                return;\n            }\n\t\t\tthis.scan_api_call(input, (r) => {\n\t\t\t\tconst data = r && r.message;\n\t\t\t\tif (!data || Object.keys(data).length === 0) {\n\t\t\t\t\tthis.show_alert(__(\"Cannot find Item with this Barcode\"), \"red\");\n\t\t\t\t\tthis.clean_up();\n\t\t\t\t\tthis.play_fail_sound();\n\t\t\t\t\treject();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tme.update_table(data)\n\t\t\t\t\t.then((row) => {\n\t\t\t\t\t\tthis.play_success_sound();\n\t\t\t\t\t\tresolve(row);\n\t\t\t\t\t})\n\t\t\t\t\t.catch(() => {\n\t\t\t\t\t\tthis.play_fail_sound();\n\t\t\t\t\t\treject();\n\t\t\t\t\t});\n\t\t\t});\n\t\t});\n\t}\n\n\tscan_api_call(input, callback) {\n\t\tfrappe\n\t\t\t.call({\n\t\t\t\tmethod: this.scan_api,\n\t\t\t\targs: {\n\t\t\t\t\tsearch_value: input,\n\t\t\t\t},\n\t\t\t})\n\t\t\t.then((r) => {\n\t\t\t\tfrappe.call({\n\t\t\t\t\tmethod:\"methods.methods.get_so_ref\",\n\t\t\t\t\targs:{\n\t\t\t\t\t\tsales_order : this.frm.doc.sales_order_ref,\n\t\t\t\t\t\tdata : r.message\n\t\t\t\t\t}\n\t\t\t\t}).then((d) => {\n\t\t\t\t\tconsole.log(d)\n\t\t\t\t\tcallback(d)\n\t\t\t\t})\n\t\t\t});\n\t}\n\n\tupdate_table(data) {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tlet cur_grid = this.frm.fields_dict[this.items_table_name].grid;\n\t\t\tfrappe.flags.trigger_from_barcode_scanner = true;\n\n\t\t\tconst { item_code, barcode, batch_no, serial_no, uom , against_sales_order, so_detail} = data;\n\n\t\t\tlet row = this.get_row_to_modify_on_scan(item_code, batch_no, uom, barcode);\n\n\t\t\tthis.is_new_row = false;\n\t\t\tif (!row) {\n\t\t\t\tif (this.dont_allow_new_row) {\n\t\t\t\t\tthis.show_alert(__(\"Maximum quantity scanned for item {0}.\", [item_code]), \"red\");\n\t\t\t\t\tthis.clean_up();\n\t\t\t\t\treject();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tthis.is_new_row = true;\n\n\t\t\t\t// add new row if new item/batch is scanned\n\t\t\t\trow = frappe.model.add_child(this.frm.doc, cur_grid.doctype, this.items_table_name);\n\t\t\t\t// trigger any row add triggers defined on child table.\n\t\t\t\tthis.frm.script_manager.trigger(`${this.items_table_name}_add`, row.doctype, row.name);\n\t\t\t\tthis.frm.has_items = false;\n\t\t\t}\n\n\t\t\tif (this.is_duplicate_serial_no(row, serial_no)) {\n\t\t\t\tthis.clean_up();\n\t\t\t\treject();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tfrappe.run_serially([\n\t\t\t\t() => this.set_selector_trigger_flag(data),\n\t\t\t\t() =>\n\t\t\t\t\tthis.set_item(row, item_code, barcode, batch_no, serial_no, against_sales_order, so_detail).then((qty) => {\n\t\t\t\t\t\tthis.show_scan_message(row.idx, row.item_code, qty);\n\t\t\t\t\t}),\n\t\t\t\t() => this.set_barcode_uom(row, uom),\n\t\t\t\t() => this.set_serial_no(row, serial_no),\n\t\t\t\t() => this.set_batch_no(row, batch_no),\n\t\t\t\t() => this.set_barcode(row, barcode),\n\t\t\t\t() => this.so_ref(row, against_sales_order),\n\t\t\t\t() => this.soi_ref(row, so_detail),\n\t\t\t\t() => this.clean_up(),\n\t\t\t\t() => this.revert_selector_flag(),\n\t\t\t\t() => resolve(row),\n\t\t\t]);\n\t\t});\n\t}\n\n\t// batch and serial selector is reduandant when all info can be added by scan\n\t// this flag on item row is used by transaction.js to avoid triggering selector\n\tset_selector_trigger_flag(data) {\n\t\tconst { batch_no, serial_no, has_batch_no, has_serial_no } = data;\n\n\t\tconst require_selecting_batch = has_batch_no && !batch_no;\n\t\tconst require_selecting_serial = has_serial_no && !serial_no;\n\n\t\tif (!(require_selecting_batch || require_selecting_serial)) {\n\t\t\tfrappe.flags.hide_serial_batch_dialog = true;\n\t\t}\n\t}\n\n\trevert_selector_flag() {\n\t\tfrappe.flags.hide_serial_batch_dialog = false;\n\t\tfrappe.flags.trigger_from_barcode_scanner = false;\n\t}\n\n\tset_item(row, item_code, barcode, batch_no, serial_no) {\n\t\treturn new Promise((resolve) => {\n\t\t\tconst increment = async (value = 1) => {\n\t\t\t\tconst item_data = { item_code: item_code, use_serial_batch_fields: 1.0 };\n\t\t\t\tfrappe.flags.trigger_from_barcode_scanner = true;\n\t\t\t\titem_data[this.qty_field] = Number(row[this.qty_field] || 0) + Number(value);\n\t\t\t\tawait frappe.model.set_value(row.doctype, row.name, item_data);\n\t\t\t\treturn value;\n\t\t\t};\n\n\t\t\tif (this.prompt_qty) {\n\t\t\t\tfrappe.prompt(__(\"Please enter quantity for item {0}\", [item_code]), ({ value }) => {\n\t\t\t\t\tincrement(value).then((value) => resolve(value));\n\t\t\t\t});\n\t\t\t} else if (this.frm.has_items) {\n\t\t\t\tthis.prepare_item_for_scan(row, item_code, barcode, batch_no, serial_no);\n\t\t\t} else {\n\t\t\t\tincrement().then((value) => resolve(value));\n\t\t\t}\n\t\t});\n\t}\n\n\tprepare_item_for_scan(row, item_code, barcode, batch_no, serial_no) {\n\t\tvar me = this;\n\t\tthis.dialog = new frappe.ui.Dialog({\n\t\t\ttitle: __(\"Scan barcode for item {0}\", [item_code]),\n\t\t\tfields: me.get_fields_for_dialog(row, item_code, barcode, batch_no, serial_no),\n\t\t});\n\n\t\tthis.dialog.set_primary_action(__(\"Update\"), () => {\n\t\t\tconst item_data = { item_code: item_code };\n\t\t\titem_data[this.qty_field] = this.dialog.get_value(\"scanned_qty\");\n\t\t\titem_data[\"has_item_scanned\"] = 1;\n\n\t\t\tthis.remaining_qty =\n\t\t\t\tflt(this.dialog.get_value(\"qty\")) - flt(this.dialog.get_value(\"scanned_qty\"));\n\t\t\tfrappe.model.set_value(row.doctype, row.name, item_data);\n\n\t\t\tfrappe.run_serially([\n\t\t\t\t() => this.set_batch_no(row, this.dialog.get_value(\"batch_no\")),\n\t\t\t\t() => this.set_barcode(row, this.dialog.get_value(\"barcode\")),\n\t\t\t\t() => this.set_serial_no(row, this.dialog.get_value(\"serial_no\")),\n\t\t\t\t() => this.add_child_for_remaining_qty(row),\n\t\t\t\t() => this.clean_up(),\n\t\t\t]);\n\n\t\t\tthis.dialog.hide();\n\t\t});\n\n\t\tthis.dialog.show();\n\n\t\tthis.$scan_btn = this.dialog.$wrapper.find(\".link-btn\");\n\t\tthis.$scan_btn.css(\"display\", \"inline\");\n\t}\n\n\tget_fields_for_dialog(row, item_code, barcode, batch_no, serial_no) {\n\t\tlet fields = [\n\t\t\t{\n\t\t\t\tfieldtype: \"Data\",\n\t\t\t\tfieldname: \"barcode_scanner\",\n\t\t\t\toptions: \"Barcode\",\n\t\t\t\tlabel: __(\"Scan Barcode\"),\n\t\t\t\tonchange: (e) => {\n\t\t\t\t\tif (!e) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (e.target.value) {\n\t\t\t\t\t\tthis.scan_api_call(e.target.value, (r) => {\n\t\t\t\t\t\t\tif (r.message) {\n\t\t\t\t\t\t\t\tthis.update_dialog_values(item_code, r);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldtype: \"Section Break\",\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldtype: \"Float\",\n\t\t\t\tfieldname: \"qty\",\n\t\t\t\tlabel: __(\"Quantity to Scan\"),\n\t\t\t\tdefault: row[this.qty_field] || 1,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldtype: \"Column Break\",\n\t\t\t\tfieldname: \"column_break_1\",\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldtype: \"Float\",\n\t\t\t\tread_only: 1,\n\t\t\t\tfieldname: \"scanned_qty\",\n\t\t\t\tlabel: __(\"Scanned Quantity\"),\n\t\t\t\tdefault: 1,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldtype: \"Section Break\",\n\t\t\t},\n\t\t];\n\n\t\tif (batch_no) {\n\t\t\tfields.push({\n\t\t\t\tfieldtype: \"Link\",\n\t\t\t\tfieldname: \"batch_no\",\n\t\t\t\toptions: \"Batch No\",\n\t\t\t\tlabel: __(\"Batch No\"),\n\t\t\t\tdefault: batch_no,\n\t\t\t\tread_only: 1,\n\t\t\t\thidden: 1,\n\t\t\t});\n\t\t}\n\n\t\tif (serial_no) {\n\t\t\tfields.push({\n\t\t\t\tfieldtype: \"Small Text\",\n\t\t\t\tfieldname: \"serial_no\",\n\t\t\t\tlabel: __(\"Serial Nos\"),\n\t\t\t\tdefault: serial_no,\n\t\t\t\tread_only: 1,\n\t\t\t});\n\t\t}\n\n\t\tif (barcode) {\n\t\t\tfields.push({\n\t\t\t\tfieldtype: \"Data\",\n\t\t\t\tfieldname: \"barcode\",\n\t\t\t\toptions: \"Barcode\",\n\t\t\t\tlabel: __(\"Barcode\"),\n\t\t\t\tdefault: barcode,\n\t\t\t\tread_only: 1,\n\t\t\t\thidden: 1,\n\t\t\t});\n\t\t}\n\n\t\treturn fields;\n\t}\n\n\tupdate_dialog_values(scanned_item, r) {\n\t\tconst { item_code, barcode, batch_no, serial_no } = r.message;\n\n\t\tthis.dialog.set_value(\"barcode_scanner\", \"\");\n\t\tif (\n\t\t\titem_code === scanned_item &&\n\t\t\t(this.dialog.get_value(\"barcode\") === barcode || batch_no || serial_no)\n\t\t) {\n\t\t\tif (batch_no) {\n\t\t\t\tthis.dialog.set_value(\"batch_no\", batch_no);\n\t\t\t}\n\n\t\t\tif (serial_no) {\n\t\t\t\tthis.validate_duplicate_serial_no(serial_no);\n\t\t\t\tlet serial_nos = this.dialog.get_value(\"serial_no\") + \"\\n\" + serial_no;\n\t\t\t\tthis.dialog.set_value(\"serial_no\", serial_nos);\n\t\t\t}\n\n\t\t\tlet qty = flt(this.dialog.get_value(\"scanned_qty\")) + 1.0;\n\t\t\tthis.dialog.set_value(\"scanned_qty\", qty);\n\t\t}\n\t}\n\n\tvalidate_duplicate_serial_no(serial_no) {\n\t\tlet serial_nos = this.dialog.get_value(\"serial_no\")\n\t\t\t? this.dialog.get_value(\"serial_no\").split(\"\\n\")\n\t\t\t: [];\n\n\t\tif (in_list(serial_nos, serial_no)) {\n\t\t\tfrappe.throw(__(\"Serial No {0} already scanned\", [serial_no]));\n\t\t}\n\t}\n\n\tadd_child_for_remaining_qty(prev_row) {\n\t\tif (this.remaining_qty && this.remaining_qty > 0) {\n\t\t\tlet cur_grid = this.frm.fields_dict[this.items_table_name].grid;\n\t\t\tlet row = frappe.model.add_child(this.frm.doc, cur_grid.doctype, this.items_table_name);\n\n\t\t\tlet ignore_fields = [\n\t\t\t\t\"name\",\n\t\t\t\t\"idx\",\n\t\t\t\t\"batch_no\",\n\t\t\t\t\"barcode\",\n\t\t\t\t\"received_qty\",\n\t\t\t\t\"serial_no\",\n\t\t\t\t\"has_item_scanned\",\n\t\t\t];\n\n\t\t\tfor (let key in prev_row) {\n\t\t\t\tif (in_list(ignore_fields, key)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\trow[key] = prev_row[key];\n\t\t\t}\n\n\t\t\trow[this.qty_field] = this.remaining_qty;\n\t\t\tif (this.qty_field == \"qty\" && frappe.meta.has_field(row.doctype, \"stock_qty\")) {\n\t\t\t\trow[\"stock_qty\"] = this.remaining_qty * row.conversion_factor;\n\t\t\t}\n\n\t\t\tthis.frm.script_manager.trigger(\"item_code\", row.doctype, row.name);\n\t\t}\n\t}\n\n\tasync set_serial_no(row, serial_no) {\n\t\tif (serial_no && frappe.meta.has_field(row.doctype, this.serial_no_field)) {\n\t\t\tconst existing_serial_nos = row[this.serial_no_field];\n\t\t\tlet new_serial_nos = \"\";\n\n\t\t\tif (!!existing_serial_nos) {\n\t\t\t\tnew_serial_nos = existing_serial_nos + \"\\n\" + serial_no;\n\t\t\t} else {\n\t\t\t\tnew_serial_nos = serial_no;\n\t\t\t}\n\t\t\tawait frappe.model.set_value(row.doctype, row.name, this.serial_no_field, new_serial_nos);\n\t\t}\n\t}\n\n\tasync set_barcode_uom(row, uom) {\n\t\tif (uom && frappe.meta.has_field(row.doctype, this.uom_field)) {\n\t\t\tawait frappe.model.set_value(row.doctype, row.name, this.uom_field, uom);\n\t\t}\n\t}\n\n\tasync set_batch_no(row, batch_no) {\n\t\tif (batch_no && frappe.meta.has_field(row.doctype, this.batch_no_field)) {\n\t\t\tawait frappe.model.set_value(row.doctype, row.name, this.batch_no_field, batch_no);\n\t\t}\n\t}\n\t\n\tasync so_ref(row, against_sales_order) {\n\t\tif (against_sales_order && frappe.meta.has_field(row.doctype, this.against_sales_order)) {\n\t\t\tawait frappe.model.set_value(row.doctype, row.name, this.against_sales_order, against_sales_order);\n\t\t}\n\t}\n\t\n\tasync soi_ref(row, so_detail) {\n\t\tif (so_detail && frappe.meta.has_field(row.doctype, this.so_detail)) {\n\t\t\tawait frappe.model.set_value(row.doctype, row.name, this.so_detail, so_detail);\n\t\t}\n\t}\n\n\tasync set_barcode(row, barcode) {\n\t\tif (barcode && frappe.meta.has_field(row.doctype, this.barcode_field)) {\n\t\t\tawait frappe.model.set_value(row.doctype, row.name, this.barcode_field, barcode);\n\t\t}\n\t}\n\n\tshow_scan_message(idx, exist = null, qty = 1) {\n\t\t// show new row or qty increase toast\n\t\tif (exist) {\n\t\t\tthis.show_alert(__(\"Row #{0}: Qty increased by {1}\", [idx, qty]), \"green\");\n\t\t} else {\n\t\t\tthis.show_alert(__(\"Row #{0}: Item added\", [idx]), \"green\");\n\t\t}\n\t}\n\n\tis_duplicate_serial_no(row, serial_no) {\n\t\tconst is_duplicate = row[this.serial_no_field]?.includes(serial_no);\n\n\t\tif (is_duplicate) {\n\t\t\tthis.show_alert(__(\"Serial No {0} is already added\", [serial_no]), \"orange\");\n\t\t}\n\t\treturn is_duplicate;\n\t}\n\n\tget_row_to_modify_on_scan(item_code, batch_no, uom, barcode) {\n\t\tlet cur_grid = this.frm.fields_dict[this.items_table_name].grid;\n\n\t\t// Check if batch is scanned and table has batch no field\n\t\tlet is_batch_no_scan = batch_no && frappe.meta.has_field(cur_grid.doctype, this.batch_no_field);\n\t\tlet check_max_qty = this.max_qty_field && frappe.meta.has_field(cur_grid.doctype, this.max_qty_field);\n\n\t\tconst matching_row = (row) => {\n\t\t\tconst item_match = row.item_code == item_code;\n\t\t\tconst batch_match = !row[this.batch_no_field] || row[this.batch_no_field] == batch_no;\n\t\t\tconst uom_match = !uom || row[this.uom_field] == uom;\n\t\t\tconst qty_in_limit = flt(row[this.qty_field]) < flt(row[this.max_qty_field]);\n\t\t\tconst item_scanned = row.has_item_scanned;\n\n\t\t\treturn (\n\t\t\t\titem_match &&\n\t\t\t\tuom_match &&\n\t\t\t\t!item_scanned &&\n\t\t\t\t(!is_batch_no_scan || batch_match) &&\n\t\t\t\t(!check_max_qty || qty_in_limit)\n\t\t\t);\n\t\t};\n\n\t\treturn this.items_table.find(matching_row) || this.get_existing_blank_row();\n\t}\n\n\tget_existing_blank_row() {\n\t\treturn this.items_table.find((d) => !d.item_code);\n\t}\n\n\tplay_success_sound() {\n\t\tthis.success_sound && frappe.utils.play_sound(this.success_sound);\n\t}\n\n\tplay_fail_sound() {\n\t\tthis.fail_sound && frappe.utils.play_sound(this.fail_sound);\n\t}\n\n\tclean_up() {\n\t\tthis.scan_barcode_field.set_value(\"\");\n\t\trefresh_field(this.items_table_name);\n\t}\n\tshow_alert(msg, indicator, duration = 3) {\n\t\tfrappe.show_alert({ message: msg, indicator: indicator }, duration);\n\t}\n};\n"],
  "mappings": "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",
  "names": ["opts", "resolve", "reject", "me", "input", "r", "data", "row", "callback", "d", "cur_grid", "item_code", "barcode", "batch_no", "serial_no", "uom", "against_sales_order", "so_detail", "qty", "has_batch_no", "has_serial_no", "increment", "value", "item_data", "fields", "e", "scanned_item", "serial_nos", "prev_row", "ignore_fields", "key", "existing_serial_nos", "new_serial_nos", "idx", "exist", "_a", "is_duplicate", "is_batch_no_scan", "check_max_qty", "matching_row", "item_match", "batch_match", "uom_match", "qty_in_limit", "item_scanned", "msg", "indicator", "duration"]
}
